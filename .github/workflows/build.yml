name: Build, Test and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Build
        run: go build -v ./...

  release-please:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: go
          package-name: projgen
          token: ${{ secrets.GITHUB_TOKEN }}
          
  release-binaries:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build Release Binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -o projgen-linux-amd64
          GOOS=windows GOARCH=amd64 go build -o projgen-windows-amd64.exe
          GOOS=darwin GOARCH=amd64 go build -o projgen-darwin-amd64

      - name: Upload Release Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.release-please.outputs.tag_name }} projgen-linux-amd64
          gh release upload ${{ needs.release-please.outputs.tag_name }} projgen-windows-amd64.exe
          gh release upload ${{ needs.release-please.outputs.tag_name }} projgen-darwin-amd64
